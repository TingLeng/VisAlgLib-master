/* Generated by Together */
/*******************************************************************************
* Copyright (C) 2011, 上海微电子装备有限公司
* All rights reserved.
* 产品号   : SSB225, SSB500, SSB300, SLD500
* 所属组件 : CV
* 模块名称 : CV
* 文件名称 : CVRANSAC_ParameterEstimator.h
* 概要描述 : CVRANSAC_ParameterEstimator定义
* 历史记录 :
* 版本    日  期    作  者  内容
*
* V1.0  2015-08-18  tuq  添加文件头部注释
* 
* 
******************************************************************************/

#ifndef _PARAMETER_ESTIMATOR_H_
#define _PARAMETER_ESTIMATOR_H_

#include <vector>

/**
* This class defines the interface for parameter estimators.
* Classes which inherit from it can be used by the Ransac class to perform robust
* parameter estimation.
* The interface includes three methods:
*                           1.estimate() - Estimation of the parameters using the minimal
*                                        amount of data (exact estimate).
*                           2.leastSquaresEstimate() - Estimation of the parameters using
*                                                      overdetermined data, so that the estimate
*                                                      minimizes a least squres error criteria.
*                           3.agree() - Does the given data agree with the model parameters.
*
* Author: Ziv Yaniv
*/

template<class T, class S>
class CVRANSAC_ParameterEstimator {
public:	

	/**
	* Constructor which takes the number of data objects required for an exact 
	* estimate (e.g. 2 for a line where the data objects are points
	*/
	CVRANSAC_ParameterEstimator(unsigned int minElements, unsigned int nParamterSize) : 
	  minForEstimate(minElements), paramterSize(nParamterSize){} 

	/**
	* Exact estimation of parameters.
	* @param data The data used for the estimate.
	* @param parameters This vector is cleared and then filled with the computed parameters.
	*/
	virtual void estimate(const std::vector<const T *> &data, std::vector<S> &parameters) = 0;

	/**
	* Least squares estimation of parameters.
	* @param data The data used for the estimate.
	* @param parameters This vector is cleared and then filled with the computed parameters.
	*/
	virtual void leastSquaresEstimate(const std::vector<const T *> &data, std::vector<S> &parameters) = 0;

	/**
	* This method tests if the given data agrees with the given model parameters.
	*/
	virtual int agree(const std::vector<S> &parameters, const T &data) = 0;



	/**
	* Returns the number of data objects required for an exact 
	* estimate (e.g. 2 for a line where the data objects are points)
	*/
	unsigned int numForEstimate() {return minForEstimate;}


	unsigned int numParamters(){return paramterSize;}


protected:
	unsigned int minForEstimate;
	unsigned int paramterSize;
};

#endif //_PARAMETER_ESTIMATOR_H_
